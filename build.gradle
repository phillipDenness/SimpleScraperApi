buildscript {
	ext {
		springBootVersion = '2.0.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'org.springframework.boot' version '2.1.3.RELEASE'
	id 'java'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse'
apply plugin: 'application'

group = 'com.phillip.denness'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
mainClassName = 'com.phillip.denness.scraper.Application'

ext {
	set('azureVersion', '2.1.2')
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
	jcenter()
}

dependencies {
	compile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'
	compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'
	compile 'org.projectlombok:lombok-maven-plugin:1.18.4.0'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.microsoft.azure:azure-active-directory-spring-boot-starter'
	compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
	compile group: 'org.springframework.security', name: 'spring-security-oauth2-client'
	compile group: 'org.springframework.security', name: 'spring-security-oauth2-jose'

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile group: 'junit', name: 'junit', version: '4.12'
	testCompile group: 'info.cukes', name: 'cucumber-junit', version: '1.2.5'
	testCompile group: 'info.cukes', name: 'cucumber-core', version: '1.2.5'
	testCompile group: 'info.cukes', name: 'cucumber-spring', version: '1.2.5'
}

dependencyManagement {
	imports {
		mavenBom "com.microsoft.azure:azure-spring-boot-bom:${azureVersion}"
	}
}

bootJar {
	baseName 'scraper'
	archiveName = "$baseName"+".jar"
	destinationDir = file("$rootDir/build/libs")
	manifest {
		attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
	}
}

task myZip(type: Zip) {
	from '/'
	include 'build/libs/*.jar'
	include 'Procfile'
	include '.ebextensions/*'

	archiveName 'deploy.zip'
	destinationDir(file('/build'))
}

myZip.dependsOn bootJar
myZip.shouldRunAfter bootJar
bootJar.shouldRunAfter clean

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean
